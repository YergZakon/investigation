# streamlit_app.py

import streamlit as st
import openai
from openai import OpenAI
import os
import json
from datetime import datetime
from utils.methodology_handler import MethodologyHandler
from utils.pdf_parser import extract_text_from_pdf
from pathlib import Path

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
if 'openai_client' not in st.session_state:
    st.session_state.openai_client = None

if 'methodology_handler' not in st.session_state:
    st.session_state.methodology_handler = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
st.markdown("""
    <style>
        .block-container { padding-top: 2rem; padding-bottom: 2rem; }
        .stButton>button { width: 100%; }
        .status-box {
            padding: 1rem;
            border-radius: 0.5rem;
            margin: 1rem 0;
        }
        .success-box {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        .error-box {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
    </style>
""", unsafe_allow_html=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
def create_directories():
    try:
        Path("storage/methodologies").mkdir(parents=True, exist_ok=True)
        Path("storage/results").mkdir(parents=True, exist_ok=True)
        Path("storage/files").mkdir(parents=True, exist_ok=True)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {str(e)}")
        raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
def init_openai(api_key):
    try:
        if not api_key:
            st.error("API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return False
        
        client = OpenAI(api_key=api_key)
        st.session_state.openai_client = client
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {str(e)}")
        return False

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
def extract_facts(client, case_description: str) -> str:
    try:
        if not case_description.strip():
            return "–û—à–∏–±–∫–∞: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Ñ–∞–±—É–ª—ã –¥–µ–ª–∞ –∏ –≤—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã (–¥–∞—Ç—ã, —Å–æ–±—ã—Ç–∏—è, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –º–µ—Å—Ç–∞, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞):
        {case_description}
        –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –ø—É–Ω–∫—Ç–æ–≤.
        """
        messages = [
            {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –≤—ã–¥–µ–ª—è—Ç—å —Ñ–∞–∫—Ç—ã, —Å–æ–±—ã—Ç–∏—è, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –º–µ—Å—Ç–∞ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"},
            {"role": "user", "content": prompt}
        ]

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            max_tokens=500,
            temperature=0.3,
            timeout=20
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–æ–≤: {str(e)}"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
def create_investigation_plan(client, facts: str, methodology_handler=None) -> str:
    try:
        if not facts.strip():
            return "–û—à–∏–±–∫–∞: –§–∞–∫—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –º–µ—Ç–æ–¥–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        methodology_context = ""
        if methodology_handler:
            try:
                methodology_context = methodology_handler.get_recommendations_context(facts)
            except Exception as e:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –º–µ—Ç–æ–¥–∏–∫–∏: {str(e)}")

        prompt = f"""
        {methodology_context}
        –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–∫—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –≤–∫–ª—é—á–∞—é—â–∏–π –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã:
        –§–∞–∫—Ç—ã: {facts}
        –û—Ç–≤–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –≤ –≤–∏–¥–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.
        """
        messages = [
            {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å, —É–º–µ—é—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Å–∞–º—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"},
            {"role": "user", "content": prompt}
        ]

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            max_tokens=900,
            temperature=0.5,
            timeout=20
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}"

# –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
with st.sidebar:
    st.header("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á –∏–∑ secrets
    api_key = st.secrets.get("openai_api_key")
    if api_key and init_openai(api_key):
        st.success("API –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
    else:
        st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π API –∫–ª—é—á OpenAI")
        
    st.header("üìö –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        ["–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–æ–¥–∏–∫–∏", "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"]
    )

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
if not st.session_state.openai_client:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenAI –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é")
else:
    if page == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–æ–¥–∏–∫–∏":
        st.header("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–æ–¥–∏–∫–∏ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
        
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª —Å –º–µ—Ç–æ–¥–∏–∫–æ–π",
            type=["pdf"],
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –º–µ—Ç–æ–¥–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF"
        )
        
        if uploaded_file is not None:
            if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Ç–æ–¥–∏–∫—É"):
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–æ–¥–∏–∫–∏..."):
                    try:
                        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        create_directories()
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        file_path = f"storage/methodologies/{uploaded_file.name}"
                        with open(file_path, "wb") as f:
                            f.write(uploaded_file.getbuffer())
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                        methodology_text = extract_text_from_pdf(file_path)
                        
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Ç–æ–¥–∏–∫–∏
                        methodology_handler = MethodologyHandler(api_key=api_key)
                        chunks = methodology_handler.process_methodology(methodology_text)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
                        methodology_handler.save_index("storage/methodologies/index")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                        st.session_state.methodology_handler = methodology_handler
                        
                        st.success(f"–ú–µ—Ç–æ–¥–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! –°–æ–∑–¥–∞–Ω–æ {chunks} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.")
                    
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ç–æ–¥–∏–∫–∏: {str(e)}")

    elif page == "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è":
        st.header("üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
        
        case_number = st.text_input(
            "–ù–æ–º–µ—Ä –¥–µ–ª–∞",
            help="–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–µ–ª–∞"
        )
        
        case_description = st.text_area(
            "–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–±—É–ª—ã –¥–µ–ª–∞",
            height=200,
            help="–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤ –¥–µ–ª–∞"
        )
        
        if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"):
            if not case_number or not case_description:
                st.warning("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã")
            else:
                with st.spinner("–ê–Ω–∞–ª–∏–∑ –¥–µ–ª–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞..."):
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã
                        facts = extract_facts(st.session_state.openai_client, case_description)
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞–Ω
                        plan = create_investigation_plan(
                            st.session_state.openai_client,
                            facts,
                            st.session_state.methodology_handler
                        )
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        st.subheader("üìù –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã")
                        st.markdown(facts)
                        
                        st.subheader("üìå –ü–ª–∞–Ω —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
                        st.markdown(plan)
                        
                        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        results = {
                            "case_number": case_number,
                            "facts": facts,
                            "plan": plan,
                            "generated_at": datetime.now().isoformat()
                        }
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        results_path = f"storage/results/plan_{case_number}.json"
                        with open(results_path, "w", encoding="utf-8") as f:
                            json.dump(results, f, ensure_ascii=False, indent=2)
                        
                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        with open(results_path, "r", encoding="utf-8") as f:
                            st.download_button(
                                label="üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                                data=f.read(),
                                file_name=f"plan_{case_number}.json",
                                mime="application/json"
                            )
                    
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}")

# –ù–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        ¬© 2024 –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π | –í–µ—Ä—Å–∏—è 1.0
    </div>
    """,
    unsafe_allow_html=True
)